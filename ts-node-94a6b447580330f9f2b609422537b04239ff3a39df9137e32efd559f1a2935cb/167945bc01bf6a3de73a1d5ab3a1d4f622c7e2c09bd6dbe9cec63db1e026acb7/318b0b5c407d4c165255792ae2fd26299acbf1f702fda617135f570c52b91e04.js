"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const StreamQueue_1 = require("../database/entity/StreamQueue");
const connection_1 = require("../database/connection");
const User_1 = require("../database/entity/User");
const throttle_debounce_1 = require("throttle-debounce");
const moment = require("moment");
var express = require('express');
var router = express.Router();
router.post('/update', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const update = throttle_debounce_1.throttle(1000, () => {
        setImmediate(StreamQueue_1.updateStreamQueue);
    });
    update();
    function sendData() {
        return __awaiter(this, void 0, void 0, function* () {
            res.send({
                auth: true,
                points: req.user.points,
                queue: (yield StreamQueue_1.StreamQueue.currentAndNextStreams()),
                viewers: (yield User_1.User.viewers()),
                mostPoints: (yield User_1.User.mostPoints()),
                mostPlace: (yield User_1.User.mostPlace()),
            });
        });
    }
    if (req.isAuthenticated()) {
        //check if stream is online
        let current = yield StreamQueue_1.StreamQueue.currentStream();
        //Check if stream and is not self stream
        if (current == undefined || current.user.id === req.user.id) {
            yield sendData();
            return;
        }
        const isOnline = yield StreamQueue_1.StreamQueue.isCurrentOnline(current.user.twitchId);
        //Check if stream is online
        if (!isOnline) {
            yield sendData();
            return;
        }
        let newDate = moment();
        let lastUpdate = req.user.lastUpdateTime();
        //If lastUpdate was one minutes or less ago
        if (moment(lastUpdate).add(1, "minutes") >= newDate) {
            yield req.user.changePoints((newDate.toDate().getTime() - lastUpdate.getTime()) / 1000);
            req.user.lastUpdate = newDate.toDate();
            yield req.user.save();
        }
        else {
            req.user.lastUpdate = newDate.toDate();
            yield req.user.save();
        }
        yield sendData();
        return;
    }
    else {
        //Not auth
        return res.send({ auth: false });
    }
}));
router.post('/add', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    if (req.isAuthenticated()) {
        //Check if queue is empty
        let cost = (yield StreamQueue_1.StreamQueue.isEmpty()) ? 0 : 1000;
        //Check if enough pointsFunc
        let points = (yield req.user.points);
        if (points < cost) {
            //No enough point
            res.send({ auth: true, enough: false, points, cost });
        }
        else {
            //Enough point
            let stream = new StreamQueue_1.StreamQueue();
            stream.amount = cost;
            stream.time = 60 * 10;
            stream.user = req.user;
            let repository = connection_1.getDBConnection().getRepository(StreamQueue_1.StreamQueue);
            yield repository.save(stream);
            req.user.streamQueue.push(stream);
            //Change points
            yield req.user.changePoints(-cost);
            //Discord
            (() => {
                //Stop spam, only one message per hour
                if (global['discordAntiSpamDate'] >= moment().subtract("1", "hour")) {
                    return;
                }
                global['discordAntiSpamDate'] = moment();
                const channel = req.discord.channels.find((ch) => ch.id === '617835840068124692');
                if (!channel)
                    return;
                channel['send'](`
  Un stream viens d'être lancé sur StreamRunners ! Va vite récupérer des points !
  https://streamrunners.fr/`);
            })();
            res.send({ auth: true, enough: true });
        }
    }
    else {
        //Not auth
        res.send({ auth: false });
    }
}));
router.post('/delete', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    if (req.isUnauthenticated()) {
        return res.send({ auth: false });
    }
    //Get id
    const id = req['body'].id;
    if (id == undefined) {
        return res.send({ auth: true, error: true, errorMessage: "Impossible de trouver la place" });
    }
    //Get stream
    const repo = connection_1.getDBConnection().getRepository(StreamQueue_1.StreamQueue);
    const stream = yield repo.createQueryBuilder("queue")
        .leftJoinAndSelect("queue.user", "user")
        .where("queue.id = :id", { id })
        .andWhere("user.id = :userid", { userid: req.user.id })
        .getOne();
    if (stream == undefined || stream.user.id !== req.user.id) {
        return res.send({ auth: true, error: true, errorMessage: "Impossible de trouver la place" });
    }
    if ((yield StreamQueue_1.StreamQueue.currentStream()).id === stream.id) {
        return res.send({ auth: true, error: true, errorMessage: "On ne peut pas supprimer si on à la première place" });
    }
    //Delete stream
    yield repo.remove(stream);
    //Refund
    yield req.user.changePoints(stream.amount);
    yield req.user.save();
    return res.send({ auth: true, error: false });
}));
router.post('/skip', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    if (req.isAuthenticated() && req.user.moderator) {
        let currentStream = yield StreamQueue_1.StreamQueue.currentStream();
        if (currentStream != undefined) {
            currentStream.current = currentStream.time;
            yield connection_1.getDBConnection().getRepository(StreamQueue_1.StreamQueue).save(currentStream);
        }
        res.send("Stream skippé");
    }
    else {
        res.status(403);
        res.send("Vous n'avez pas le droit de faire ça !");
    }
}));
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1N0cmVhbVJ1bm5lcnMvVHdpdGNoVmlldy9yb3V0ZXMvd2F0Y2gudHMiLCJzb3VyY2VzIjpbIi9TdHJlYW1SdW5uZXJzL1R3aXRjaFZpZXcvcm91dGVzL3dhdGNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsZ0VBQThFO0FBRTlFLHVEQUF1RDtBQUN2RCxrREFBNkM7QUFDN0MseURBQTJDO0FBRTNDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUVqQyxJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDakMsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRTlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQU8sR0FBb0IsRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUV2RCxNQUFNLE1BQU0sR0FBRyw0QkFBUSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUU7UUFDL0IsWUFBWSxDQUFDLCtCQUFpQixDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLEVBQUUsQ0FBQztJQUVULFNBQWUsUUFBUTs7WUFDbkIsR0FBRyxDQUFDLElBQUksQ0FBQztnQkFDTCxJQUFJLEVBQUUsSUFBSTtnQkFDVixNQUFNLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNO2dCQUN2QixLQUFLLEVBQUUsQ0FBQyxNQUFNLHlCQUFXLENBQUMscUJBQXFCLEVBQUUsQ0FBQztnQkFDbEQsT0FBTyxFQUFFLENBQUMsTUFBTSxXQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQy9CLFVBQVUsRUFBRSxDQUFDLE1BQU0sV0FBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUNyQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLFdBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUN0QyxDQUFDLENBQUM7UUFDUCxDQUFDO0tBQUE7SUFFRCxJQUFJLEdBQUcsQ0FB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LE9BQU8sR0FBRyxNQUFNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N0cmVhbVF1ZXVlLCB1cGRhdGVTdHJlYW1RdWV1ZX0gZnJvbSBcIi4uL2RhdGFiYXNlL2VudGl0eS9TdHJlYW1RdWV1ZVwiO1xuaW1wb3J0IHtSZXBvc2l0b3J5fSBmcm9tIFwidHlwZW9ybVwiO1xuaW1wb3J0IHtnZXREQkNvbm5lY3Rpb259IGZyb20gXCIuLi9kYXRhYmFzZS9jb25uZWN0aW9uXCI7XG5pbXBvcnQge1VzZXJ9IGZyb20gXCIuLi9kYXRhYmFzZS9lbnRpdHkvVXNlclwiO1xuaW1wb3J0IHt0aHJvdHRsZX0gZnJvbSAndGhyb3R0bGUtZGVib3VuY2UnO1xuXG5jb25zdCBtb21lbnQgPSByZXF1aXJlKFwibW9tZW50XCIpO1xuXG52YXIgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbnZhciByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuXG5yb3V0ZXIucG9zdCgnL3VwZGF0ZScsIGFzeW5jIChyZXE6IEV4cHJlc3MuUmVxdWVzdCwgcmVzKSA9PiB7XG5cbiAgICBjb25zdCB1cGRhdGUgPSB0aHJvdHRsZSgxMDAwLCAoKSA9PiB7XG4gICAgICAgIHNldEltbWVkaWF0ZSh1cGRhdGVTdHJlYW1RdWV1ZSk7XG4gICAgfSk7XG5cbiAgICB1cGRhdGUoKTtcblxuICAgIGFzeW5jIGZ1bmN0aW9uIHNlbmREYXRhKCkge1xuICAgICAgICByZXMuc2VuZCh7XG4gICAgICAgICAgICBhdXRoOiB0cnVlLFxuICAgICAgICAgICAgcG9pbnRzOiByZXEudXNlci5wb2ludHMsXG4gICAgICAgICAgICBxdWV1ZTogKGF3YWl0IFN0cmVhbVF1ZXVlLmN1cnJlbnRBbmROZXh0U3RyZWFtcygpKSxcbiAgICAgICAgICAgIHZpZXdlcnM6IChhd2FpdCBVc2VyLnZpZXdlcnMoKSksXG4gICAgICAgICAgICBtb3N0UG9pbnRzOiAoYXdhaXQgVXNlci5tb3N0UG9pbnRzKCkpLFxuICAgICAgICAgICAgbW9zdFBsYWNlOiAoYXdhaXQgVXNlci5tb3N0UGxhY2UoKSksXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXEuaXNBdXRoZW50aWNhdGVkKCkpIHtcblxuICAgICAgICAvL2NoZWNrIGlmIHN0cmVhbSBpcyBvbmxpbmVcbiAgICAgICAgbGV0IGN1cnJlbnQgPSBhd2FpdCBTdHJlYW1RdWV1ZS5jdXJyZW50U3RyZWFtKCk7XG5cbiAgICAgICAgLy9DaGVjayBpZiBzdHJlYW0gYW5kIGlzIG5vdCBzZWxmIHN0cmVhbVxuICAgICAgICBpZiAoY3VycmVudCA9PSB1bmRlZmluZWQgfHwgY3VycmVudC51c2VyLmlkID09PSByZXEudXNlci5pZCkge1xuICAgICAgICAgICAgYXdhaXQgc2VuZERhdGEoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGlzT25saW5lID0gYXdhaXQgU3RyZWFtUXVldWUuaXNDdXJyZW50T25saW5lKGN1cnJlbnQudXNlci50d2l0Y2hJZCk7XG5cbiAgICAgICAgLy9DaGVjayBpZiBzdHJlYW0gaXMgb25saW5lXG4gICAgICAgIGlmICghaXNPbmxpbmUpIHtcbiAgICAgICAgICAgIGF3YWl0IHNlbmREYXRhKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbmV3RGF0ZSA9IG1vbWVudCgpO1xuXG4gICAgICAgIGxldCBsYXN0VXBkYXRlOiBEYXRlID0gcmVxLnVzZXIubGFzdFVwZGF0ZVRpbWUoKTtcblxuICAgICAgICAvL0lmIGxhc3RVcGRhdGUgd2FzIG9uZSBtaW51dGVzIG9yIGxlc3MgYWdvXG4gICAgICAgIGlmIChtb21lbnQobGFzdFVwZGF0ZSkuYWRkKDEsIFwibWludXRlc1wiKSA+PSBuZXdEYXRlKSB7XG4gICAgICAgICAgICBhd2FpdCByZXEudXNlci5jaGFuZ2VQb2ludHMoKG5ld0RhdGUudG9EYXRlKCkuZ2V0VGltZSgpIC0gbGFzdFVwZGF0ZS5nZXRUaW1lKCkpIC8gMTAwMCk7XG4gICAgICAgICAgICByZXEudXNlci5sYXN0VXBkYXRlID0gbmV3RGF0ZS50b0RhdGUoKTtcbiAgICAgICAgICAgIGF3YWl0IHJlcS51c2VyLnNhdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcS51c2VyLmxhc3RVcGRhdGUgPSBuZXdEYXRlLnRvRGF0ZSgpO1xuICAgICAgICAgICAgYXdhaXQgcmVxLnVzZXIuc2F2ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgc2VuZERhdGEoKTtcbiAgICAgICAgcmV0dXJuO1xuXG5cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vTm90IGF1dGhcbiAgICAgICAgcmV0dXJuIHJlcy5zZW5kKHthdXRoOiBmYWxzZX0pO1xuICAgIH1cblxufSk7XG5cbnJvdXRlci5wb3N0KCcvYWRkJywgYXN5bmMgKHJlcTogRXhwcmVzcy5SZXF1ZXN0LCByZXMpID0+IHtcblxuICAgIGlmIChyZXEuaXNBdXRoZW50aWNhdGVkKCkpIHtcblxuICAgICAgICAvL0NoZWNrIGlmIHF1ZXVlIGlzIGVtcHR5XG4gICAgICAgIGxldCBjb3N0ID0gKGF3YWl0IFN0cmVhbVF1ZXVlLmlzRW1wdHkoKSkgPyAwIDogMTAwMDtcblxuICAgICAgICAvL0NoZWNrIGlmIGVub3VnaCBwb2ludHNGdW5jXG4gICAgICAgIGxldCBwb2ludHMgPSAoYXdhaXQgcmVxLnVzZXIucG9pbnRzKTtcbiAgICAgICAgaWYgKHBvaW50cyA8IGNvc3QpIHtcbiAgICAgICAgICAgIC8vTm8gZW5vdWdoIHBvaW50XG4gICAgICAgICAgICByZXMuc2VuZCh7YXV0aDogdHJ1ZSwgZW5vdWdoOiBmYWxzZSwgcG9pbnRzLCBjb3N0fSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvL0Vub3VnaCBwb2ludFxuICAgICAgICAgICAgbGV0IHN0cmVhbSA9IG5ldyBTdHJlYW1RdWV1ZSgpO1xuICAgICAgICAgICAgc3RyZWFtLmFtb3VudCA9IGNvc3Q7XG4gICAgICAgICAgICBzdHJlYW0udGltZSA9IDYwICogMTA7XG5cbiAgICAgICAgICAgIHN0cmVhbS51c2VyID0gcmVxLnVzZXI7XG5cbiAgICAgICAgICAgIGxldCByZXBvc2l0b3J5OiBSZXBvc2l0b3J5PFN0cmVhbVF1ZXVlPiA9IGdldERCQ29ubmVjdGlvbigpLmdldFJlcG9zaXRvcnkoU3RyZWFtUXVldWUpO1xuICAgICAgICAgICAgYXdhaXQgcmVwb3NpdG9yeS5zYXZlKHN0cmVhbSk7XG5cbiAgICAgICAgICAgIHJlcS51c2VyLnN0cmVhbVF1ZXVlLnB1c2goc3RyZWFtKTtcblxuICAgICAgICAgICAgLy9DaGFuZ2UgcG9pbnRzXG4gICAgICAgICAgICBhd2FpdCByZXEudXNlci5jaGFuZ2VQb2ludHMoLWNvc3QpO1xuXG4gICAgICAgICAgICAvL0Rpc2NvcmRcbiAgICAgICAgICAgICgoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAvL1N0b3Agc3BhbSwgb25seSBvbmUgbWVzc2FnZSBwZXIgaG91clxuICAgICAgICAgICAgICAgIGlmIChnbG9iYWxbJ2Rpc2NvcmRBbnRpU3BhbURhdGUnXSA+PSBtb21lbnQoKS5zdWJ0cmFjdChcIjFcIiwgXCJob3VyXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBnbG9iYWxbJ2Rpc2NvcmRBbnRpU3BhbURhdGUnXSA9IG1vbWVudCgpO1xuXG5cbiAgICAgICAgICAgICAgICBjb25zdCBjaGFubmVsID0gcmVxLmRpc2NvcmQuY2hhbm5lbHMuZmluZCgoY2gpID0+IGNoLmlkID09PSAnNjE3ODM1ODQwMDY4MTI0NjkyJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWNoYW5uZWwpIHJldHVybjtcblxuXG4gICAgICAgICAgICAgICAgY2hhbm5lbFsnc2VuZCddKGBcbiAgVW4gc3RyZWFtIHZpZW5zIGQnw6p0cmUgbGFuY8OpIHN1ciBTdHJlYW1SdW5uZXJzICEgVmEgdml0ZSByw6ljdXDDqXJlciBkZXMgcG9pbnRzICFcbiAgaHR0cHM6Ly9zdHJlYW1ydW5uZXJzLmZyL2ApO1xuICAgICAgICAgICAgfSkoKTtcblxuXG4gICAgICAgICAgICByZXMuc2VuZCh7YXV0aDogdHJ1ZSwgZW5vdWdoOiB0cnVlfSk7XG4gICAgICAgIH1cblxuXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvL05vdCBhdXRoXG4gICAgICAgIHJlcy5zZW5kKHthdXRoOiBmYWxzZX0pO1xuXG4gICAgfVxuXG59KTtcblxucm91dGVyLnBvc3QoJy9kZWxldGUnLCBhc3luYyAocmVxOiBFeHByZXNzLlJlcXVlc3QsIHJlcykgPT4ge1xuXG4gICAgaWYgKHJlcS5pc1VuYXV0aGVudGljYXRlZCgpKSB7XG4gICAgICAgIHJldHVybiByZXMuc2VuZCh7YXV0aDogZmFsc2V9KTtcbiAgICB9XG5cbiAgICAvL0dldCBpZFxuICAgIGNvbnN0IGlkID0gcmVxWydib2R5J10uaWQ7XG5cbiAgICBpZiAoaWQgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXMuc2VuZCh7YXV0aDogdHJ1ZSwgZXJyb3I6IHRydWUsIGVycm9yTWVzc2FnZTogXCJJbXBvc3NpYmxlIGRlIHRyb3V2ZXIgbGEgcGxhY2VcIn0pO1xuICAgIH1cblxuICAgIC8vR2V0IHN0cmVhbVxuICAgIGNvbnN0IHJlcG8gPSBnZXREQkNvbm5lY3Rpb24oKS5nZXRSZXBvc2l0b3J5KFN0cmVhbVF1ZXVlKTtcbiAgICBjb25zdCBzdHJlYW0gPSBhd2FpdCByZXBvLmNyZWF0ZVF1ZXJ5QnVpbGRlcihcInF1ZXVlXCIpXG4gICAgICAgIC5sZWZ0Sm9pbkFuZFNlbGVjdChcInF1ZXVlLnVzZXJcIiwgXCJ1c2VyXCIpXG4gICAgICAgIC53aGVyZShcInF1ZXVlLmlkID0gOmlkXCIsIHtpZH0pXG4gICAgICAgIC5hbmRXaGVyZShcInVzZXIuaWQgPSA6dXNlcmlkXCIsIHt1c2VyaWQ6IHJlcS51c2VyLmlkfSlcbiAgICAgICAgLmdldE9uZSgpO1xuXG4gICAgaWYgKHN0cmVhbSA9PSB1bmRlZmluZWQgfHwgc3RyZWFtLnVzZXIuaWQgIT09IHJlcS51c2VyLmlkKSB7XG4gICAgICAgIHJldHVybiByZXMuc2VuZCh7YXV0aDogdHJ1ZSwgZXJyb3I6IHRydWUsIGVycm9yTWVzc2FnZTogXCJJbXBvc3NpYmxlIGRlIHRyb3V2ZXIgbGEgcGxhY2VcIn0pO1xuICAgIH1cblxuICAgIGlmICgoYXdhaXQgU3RyZWFtUXVldWUuY3VycmVudFN0cmVhbSgpKS5pZCA9PT0gc3RyZWFtLmlkKSB7XG4gICAgICAgIHJldHVybiByZXMuc2VuZCh7YXV0aDogdHJ1ZSwgZXJyb3I6IHRydWUsIGVycm9yTWVzc2FnZTogXCJPbiBuZSBwZXV0IHBhcyBzdXBwcmltZXIgc2kgb24gw6AgbGEgcHJlbWnDqHJlIHBsYWNlXCJ9KTtcbiAgICB9XG5cbiAgICAvL0RlbGV0ZSBzdHJlYW1cbiAgICBhd2FpdCByZXBvLnJlbW92ZShzdHJlYW0pO1xuXG4gICAgLy9SZWZ1bmRcbiAgICBhd2FpdCByZXEudXNlci5jaGFuZ2VQb2ludHMoc3RyZWFtLmFtb3VudCk7XG4gICAgYXdhaXQgcmVxLnVzZXIuc2F2ZSgpO1xuXG4gICAgcmV0dXJuIHJlcy5zZW5kKHthdXRoOiB0cnVlLCBlcnJvcjogZmFsc2V9KTtcblxufSk7XG5cbnJvdXRlci5wb3N0KCcvc2tpcCcsIGFzeW5jIChyZXE6IEV4cHJlc3MuUmVxdWVzdCwgcmVzKSA9PiB7XG5cbiAgICBpZiAocmVxLmlzQXV0aGVudGljYXRlZCgpICYmIHJlcS51c2VyLm1vZGVyYXRvcikge1xuXG5cbiAgICAgICAgbGV0IGN1cnJlbnRTdHJlYW0gPSBhd2FpdCBTdHJlYW1RdWV1ZS5jdXJyZW50U3RyZWFtKCk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRTdHJlYW0gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjdXJyZW50U3RyZWFtLmN1cnJlbnQgPSBjdXJyZW50U3RyZWFtLnRpbWU7XG4gICAgICAgICAgICBhd2FpdCBnZXREQkNvbm5lY3Rpb24oKS5nZXRSZXBvc2l0b3J5KFN0cmVhbVF1ZXVlKS5zYXZlKGN1cnJlbnRTdHJlYW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzLnNlbmQoXCJTdHJlYW0gc2tpcHDDqVwiKTtcblxuXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXMuc3RhdHVzKDQwMyk7XG4gICAgICAgIHJlcy5zZW5kKFwiVm91cyBuJ2F2ZXogcGFzIGxlIGRyb2l0IGRlIGZhaXJlIMOnYSAhXCIpO1xuICAgIH1cblxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXI7XG4iXX0=