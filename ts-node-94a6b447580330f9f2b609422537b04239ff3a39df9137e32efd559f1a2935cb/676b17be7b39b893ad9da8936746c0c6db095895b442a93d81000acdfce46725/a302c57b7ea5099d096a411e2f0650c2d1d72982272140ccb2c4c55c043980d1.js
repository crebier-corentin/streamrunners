"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const NodeCache = require("node-cache");
class CacheService {
    constructor(ttlSeconds) {
        this.cache = new NodeCache({ stdTTL: ttlSeconds, checkperiod: ttlSeconds * 0.2, useClones: false });
    }
    get(key, storeFunction) {
        const value = this.cache.get(key);
        if (value) {
            return Promise.resolve(value);
        }
        return storeFunction().then((result) => {
            this.cache.set(key, result);
            return result;
        });
    }
    del(keys) {
        this.cache.del(keys);
    }
    delStartWith(startStr = '') {
        if (!startStr) {
            return;
        }
        const keys = this.cache.keys();
        for (const key of keys) {
            if (key.indexOf(startStr) === 0) {
                this.del(key);
            }
        }
    }
    flush() {
        this.cache.flushAll();
    }
}
exports.default = CacheService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1N0cmVhbVJ1bm5lcnMvVHdpdGNoVmlldy9vdGhlci9DYWNoZVNlcnZpY2UudHMiLCJzb3VyY2VzIjpbIi9TdHJlYW1SdW5uZXJzL1R3aXRjaFZpZXcvb3RoZXIvQ2FjaGVTZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBR3hDLE1BQU0sWUFBWTtJQUlkLFlBQVksVUFBVTtRQUNsQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksU0FBUyxDQUFDLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxHQUFHLEdBQUcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztJQUN0RyxDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQVcsRUFBRSxhQUFpQztRQUM5QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQyxJQUFJLEtBQUssRUFBRTtZQUNQLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNqQztRQUVELE9BQU8sYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDbkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzVCLE9BQU8sTUFBTSxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELEdBQUcsQ0FBQyxJQUFJO1FBQ0osSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVELFlBQVksQ0FBQyxRQUFRLEdBQUcsRUFBRTtRQUN0QixJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ1gsT0FBTztTQUNWO1FBRUQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMvQixLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtZQUNwQixJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUM3QixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2pCO1NBQ0o7SUFDTCxDQUFDO0lBRUQsS0FBSztRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDMUIsQ0FBQztDQUNKO0FBR0Qsa0JBQWUsWUFBWSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTm9kZUNhY2hlID0gcmVxdWlyZShcIm5vZGUtY2FjaGVcIik7XG5pbXBvcnQge05vZGVDYWNoZSBhcyBOb2RlQ2FjaGVUeXBlfSBmcm9tIFwibm9kZS1jYWNoZVwiO1xuXG5jbGFzcyBDYWNoZVNlcnZpY2Uge1xuXG4gICAgY2FjaGU6IE5vZGVDYWNoZVR5cGU7XG5cbiAgICBjb25zdHJ1Y3Rvcih0dGxTZWNvbmRzKSB7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBuZXcgTm9kZUNhY2hlKHtzdGRUVEw6IHR0bFNlY29uZHMsIGNoZWNrcGVyaW9kOiB0dGxTZWNvbmRzICogMC4yLCB1c2VDbG9uZXM6IGZhbHNlfSk7XG4gICAgfVxuXG4gICAgZ2V0KGtleTogc3RyaW5nLCBzdG9yZUZ1bmN0aW9uOiAoKSA9PiBQcm9taXNlPGFueT4pIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmNhY2hlLmdldChrZXkpO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0b3JlRnVuY3Rpb24oKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGUuc2V0KGtleSwgcmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGRlbChrZXlzKSB7XG4gICAgICAgIHRoaXMuY2FjaGUuZGVsKGtleXMpO1xuICAgIH1cblxuICAgIGRlbFN0YXJ0V2l0aChzdGFydFN0ciA9ICcnKSB7XG4gICAgICAgIGlmICghc3RhcnRTdHIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGtleXMgPSB0aGlzLmNhY2hlLmtleXMoKTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgICAgICAgaWYgKGtleS5pbmRleE9mKHN0YXJ0U3RyKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVsKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmbHVzaCgpIHtcbiAgICAgICAgdGhpcy5jYWNoZS5mbHVzaEFsbCgpO1xuICAgIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBDYWNoZVNlcnZpY2U7Il19