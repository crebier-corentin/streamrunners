"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const StreamQueue_1 = require("../database/entity/StreamQueue");
const connection_1 = require("../database/connection");
const User_1 = require("../database/entity/User");
const throttle_debounce_1 = require("throttle-debounce");
const moment = require("moment");
var express = require('express');
var router = express.Router();
router.post('/update', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const update = throttle_debounce_1.throttle(1000, () => {
        setImmediate(StreamQueue_1.updateStreamQueue);
    });
    update();
    function sendData() {
        return __awaiter(this, void 0, void 0, function* () {
            res.send({
                auth: true,
                points: req.user.points,
                queue: (yield StreamQueue_1.StreamQueue.currentAndNextStreams()),
                viewers: (yield User_1.User.viewers()),
                mostPoints: (yield User_1.User.mostPoints()),
                mostPlace: (yield User_1.User.mostPlace()),
            });
        });
    }
    if (req.isAuthenticated()) {
        //check if stream is online
        let current = yield StreamQueue_1.StreamQueue.currentStream();
        //Check if stream and is not self stream
        if (current == undefined || current.user.id === req.user.id) {
            yield sendData();
            return;
        }
        const isOnline = yield StreamQueue_1.StreamQueue.isCurrentOnline(current.user.twitchId);
        //Check if stream is online
        if (!isOnline) {
            yield sendData();
            return;
        }
        let newDate = moment();
        let lastUpdate = req.user.lastUpdateTime();
        //If lastUpdate was one minutes or less ago
        if (moment(lastUpdate).add(1, "minutes") >= newDate) {
            yield req.user.changePoints((newDate.toDate().getTime() - lastUpdate.getTime()) / 1000);
            req.user.lastUpdate = newDate.toDate();
            yield req.user.save();
        }
        else {
            req.user.lastUpdate = newDate.toDate();
            yield req.user.save();
        }
        yield sendData();
        return;
    }
    else {
        //Not auth
        return res.send({ auth: false });
    }
}));
router.post('/add', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    if (req.isAuthenticated()) {
        //Check if queue is empty
        let cost = (yield StreamQueue_1.StreamQueue.isEmpty()) ? 0 : 1000;
        //Check if enough pointsFunc
        let points = (yield req.user.points);
        if (points < cost) {
            //No enough point
            res.send({ auth: true, enough: false, points, cost });
        }
        else {
            //Enough point
            let stream = new StreamQueue_1.StreamQueue();
            stream.amount = cost;
            stream.time = 60 * 10;
            stream.user = req.user;
            let repository = connection_1.getDBConnection().getRepository(StreamQueue_1.StreamQueue);
            yield repository.save(stream);
            req.user.streamQueue.push(stream);
            //Change points
            yield req.user.changePoints(-cost);
            res.send({ auth: true, enough: true });
        }
    }
    else {
        //Not auth
        res.send({ auth: false });
    }
}));
router.post('/delete', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    if (req.isUnauthenticated()) {
        return res.send({ auth: false });
    }
    //Get id
    const id = req['body'].id;
    if (id == undefined) {
        return res.send({ auth: true, error: true, errorMessage: "Impossible de trouver la place" });
    }
    //Get stream
    const repo = connection_1.getDBConnection().getRepository(StreamQueue_1.StreamQueue);
    const stream = yield repo.createQueryBuilder("queue")
        .leftJoinAndSelect("queue.user", "user")
        .where("queue.id = :id", { id })
        .andWhere("user.id = :userid", { userid: req.user.id })
        .getOne();
    if (stream == undefined || stream.user.id !== req.user.id) {
        return res.send({ auth: true, error: true, errorMessage: "Impossible de trouver la place" });
    }
    if ((yield StreamQueue_1.StreamQueue.currentStream()).id === stream.id) {
        return res.send({ auth: true, error: true, errorMessage: "On ne peut pas supprimer si on à la première place" });
    }
    //Delete stream
    yield repo.remove(stream);
    //Refund
    yield req.user.changePoints(stream.amount);
    yield req.user.save();
    return res.send({ auth: true, error: false });
}));
router.post('/skip', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    if (req.isAuthenticated() && req.user.moderator) {
        let currentStream = yield StreamQueue_1.StreamQueue.currentStream();
        if (currentStream != undefined) {
            currentStream.current = currentStream.time;
            yield connection_1.getDBConnection().getRepository(StreamQueue_1.StreamQueue).save(currentStream);
        }
        res.send("Stream skippé");
    }
    else {
        res.status(403);
        res.send("Vous n'avez pas le droit de faire ça !");
    }
}));
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,