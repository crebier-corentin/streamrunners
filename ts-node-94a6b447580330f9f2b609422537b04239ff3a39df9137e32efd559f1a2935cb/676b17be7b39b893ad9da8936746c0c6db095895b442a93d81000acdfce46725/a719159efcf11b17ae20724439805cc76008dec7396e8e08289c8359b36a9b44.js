"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const StreamQueue_1 = require("../database/entity/StreamQueue");
const connection_1 = require("../database/connection");
const User_1 = require("../database/entity/User");
const throttle_debounce_1 = require("throttle-debounce");
const moment = require("moment");
var express = require('express');
var router = express.Router();
router.post('/update', (req, res) => __awaiter(this, void 0, void 0, function* () {
    const update = throttle_debounce_1.throttle(1000, () => {
        setImmediate(StreamQueue_1.updateStreamQueue);
    });
    update();
    function sendData() {
        return __awaiter(this, void 0, void 0, function* () {
            res.send({
                auth: true,
                points: req.user.points,
                queue: (yield StreamQueue_1.StreamQueue.currentAndNextStreams()),
                viewers: (yield User_1.User.viewers()),
                mostPoints: (yield User_1.User.mostPoints()),
                mostPlace: (yield User_1.User.mostPlace()),
            });
        });
    }
    if (req.isAuthenticated()) {
        //check if stream is online
        let current = yield StreamQueue_1.StreamQueue.currentStream();
        //Check if stream and is not self stream
        if (current == undefined || current.user.id === req.user.id) {
            yield sendData();
            return;
        }
        let isOnline = yield StreamQueue_1.StreamQueue.isCurrentOnline(current.user.username);
        //Check if stream is online
        if (!isOnline) {
            yield sendData();
            return;
        }
        let newDate = moment();
        let lastUpdate = req.user.lastUpdateTime();
        //If lastUpdate was one minutes or less ago
        if (moment(lastUpdate).add(1, "minutes") >= newDate) {
            yield req.user.changePoints((newDate.toDate().getTime() - lastUpdate.getTime()) / 1000);
            req.user.lastUpdate = newDate.toDate();
            yield req.user.save();
        }
        else {
            req.user.lastUpdate = newDate.toDate();
            yield req.user.save();
        }
        yield sendData();
        return;
    }
    else {
        //Not auth
        return res.send({ auth: false });
    }
}));
router.post('/add', (req, res) => __awaiter(this, void 0, void 0, function* () {
    if (req.isAuthenticated()) {
        //Check if queue is empty
        let cost = (yield StreamQueue_1.StreamQueue.isEmpty()) ? 0 : 1000;
        //Check if enough pointsFunc
        let points = (yield req.user.points);
        if (points < cost) {
            //No enough point
            res.send({ auth: true, enough: false, points, cost });
        }
        else {
            //Enough point
            let stream = new StreamQueue_1.StreamQueue();
            stream.amount = cost;
            stream.time = 60 * 10;
            stream.user = req.user;
            let repository = connection_1.getDBConnection().getRepository(StreamQueue_1.StreamQueue);
            yield repository.save(stream);
            req.user.streamQueue.push(stream);
            //Change points
            yield req.user.changePoints(-cost);
            res.send({ auth: true, enough: true });
        }
    }
    else {
        //Not auth
        res.send({ auth: false });
    }
}));
router.post('/delete', (req, res) => __awaiter(this, void 0, void 0, function* () {
    if (req.isUnauthenticated()) {
        return res.send({ auth: false });
    }
    //Get id
    const id = req['body'].id;
    if (id == undefined) {
        return res.send({ auth: true, error: true, errorMessage: "Impossible de trouver la place" });
    }
    //Get stream
    const repo = connection_1.getDBConnection().getRepository(StreamQueue_1.StreamQueue);
    const stream = yield repo.createQueryBuilder("queue")
        .leftJoinAndSelect("queue.user", "user")
        .where("queue.id = :id", { id })
        .andWhere("user.id = :userid", { userid: req.user.id })
        .getOne();
    if (stream == undefined || stream.user.id !== req.user.id) {
        return res.send({ auth: true, error: true, errorMessage: "Impossible de trouver la place" });
    }
    if ((yield StreamQueue_1.StreamQueue.currentStream()).id === stream.id) {
        return res.send({ auth: true, error: true, errorMessage: "On ne peut pas supprimer si on à la première place" });
    }
    //Delete stream
    yield repo.remove(stream);
    //Refund
    yield req.user.changePoints(stream.amount);
    yield req.user.save();
    return res.send({ auth: true, error: false });
}));
router.post('/skip', (req, res) => __awaiter(this, void 0, void 0, function* () {
    if (req.isAuthenticated() && req.user.moderator) {
        let currentStream = yield StreamQueue_1.StreamQueue.currentStream();
        if (currentStream != undefined) {
            currentStream.current = currentStream.time;
            yield connection_1.getDBConnection().getRepository(StreamQueue_1.StreamQueue).save(currentStream);
        }
        res.send("Stream skippé");
    }
    else {
        res.status(403);
        res.send("Vous n'avez pas le droit de faire ça !");
    }
}));
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL1N0cmVhbVJ1bm5lcnMvVHdpdGNoVmlldy9yb3V0ZXMvd2F0Y2gudHMiLCJzb3VyY2VzIjpbIi9TdHJlYW1SdW5uZXJzL1R3aXRjaFZpZXcvcm91dGVzL3dhdGNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxnRUFBOEU7QUFFOUUsdURBQXVEO0FBQ3ZELGtEQUE2QztBQUM3Qyx5REFBMkM7QUFHM0MsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRWpDLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNqQyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBTyxHQUFvQixFQUFFLEdBQUcsRUFBRSxFQUFFO0lBRXZELE1BQU0sTUFBTSxHQUFHLDRCQUFRLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRTtRQUMvQixZQUFZLENBQUMsK0JBQWlCLENBQUMsQ0FBQztJQUNwQyxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sRUFBRSxDQUFDO0lBRVQsU0FBZSxRQUFROztZQUNuQixHQUFHLENBQUMsSUFBSSxDQUFDO2dCQUNMLElBQUksRUFBRSxJQUFJO2dCQUNWLE1BQU0sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU07Z0JBQ3ZCLEtBQUssRUFBRSxDQUFDLE1BQU0seUJBQVcsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO2dCQUNsRCxPQUFPLEVBQUUsQ0FBQyxNQUFNLFdBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDL0IsVUFBVSxFQUFFLENBQUMsTUFBTSxXQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7Z0JBQ3JDLFNBQVMsRUFBRSxDQUFDLE1BQU0sV0FBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO2FBQ3RDLENBQUMsQ0FBQztRQUNQLENBQUM7S0FBQTtJQUVELElBQUksR0FBRyxDQUFDLGVBQWUsRUFBRSxFQUFFO1FBRXZCLDJCQUEyQjtRQUMzQixJQUFJLE9BQU8sR0FBRyxNQUFNLHlCQUFXLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFaEQsd0NBQXdDO1FBQ3hDLElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUN6RCxNQUFNLFFBQVEsRUFBRSxDQUFDO1lBQ2pCLE9BQU87U0FDVjtRQUVELElBQUksUUFBUSxHQUFHLE1BQU0seUJBQVcsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV4RSwyQkFBMkI7UUFDM0IsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNYLE1BQU0sUUFBUSxFQUFFLENBQUM7WUFDakIsT0FBTztTQUNWO1FBRUQsSUFBSSxPQUFPLEdBQUcsTUFBTSxFQUFFLENBQUM7UUFFdkIsSUFBSSxVQUFVLEdBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUVqRCwyQ0FBMkM7UUFDM0MsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsSUFBSSxPQUFPLEVBQUU7WUFDakQsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztZQUN4RixHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDdkMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3pCO2FBQ0k7WUFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDdkMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3pCO1FBRUQsTUFBTSxRQUFRLEVBQUUsQ0FBQztRQUNqQixPQUFPO0tBR1Y7U0FDSTtRQUNELFVBQVU7UUFDVixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztLQUNsQztBQUVMLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFPLEdBQW9CLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFFcEQsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFLEVBQUU7UUFFdkIseUJBQXlCO1FBQ3pCLElBQUksSUFBSSxHQUFHLENBQUMsTUFBTSx5QkFBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBRXBELDRCQUE0QjtRQUM1QixJQUFJLE1BQU0sR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQyxJQUFJLE1BQU0sR0FBRyxJQUFJLEVBQUU7WUFDZixpQkFBaUI7WUFDakIsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztTQUN2RDthQUNJO1lBQ0QsY0FBYztZQUNkLElBQUksTUFBTSxHQUFHLElBQUkseUJBQVcsRUFBRSxDQUFDO1lBQy9CLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1lBQ3JCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztZQUV0QixNQUFNLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFFdkIsSUFBSSxVQUFVLEdBQTRCLDRCQUFlLEVBQUUsQ0FBQyxhQUFhLENBQUMseUJBQVcsQ0FBQyxDQUFDO1lBQ3ZGLE1BQU0sVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUU5QixHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFbEMsZUFBZTtZQUNmLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVuQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztTQUN4QztLQUdKO1NBQ0k7UUFDRCxVQUFVO1FBQ1YsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDO0tBRTNCO0FBRUwsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQU8sR0FBb0IsRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUV2RCxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFO1FBQ3pCLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDO0tBQ2xDO0lBRUQsUUFBUTtJQUNSLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFMUIsSUFBSSxFQUFFLElBQUksU0FBUyxFQUFFO1FBQ2pCLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsZ0NBQWdDLEVBQUMsQ0FBQyxDQUFDO0tBQzlGO0lBRUQsWUFBWTtJQUNaLE1BQU0sSUFBSSxHQUFHLDRCQUFlLEVBQUUsQ0FBQyxhQUFhLENBQUMseUJBQVcsQ0FBQyxDQUFDO0lBQzFELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQztTQUNoRCxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDO1NBQ3ZDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxFQUFDLEVBQUUsRUFBQyxDQUFDO1NBQzdCLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxFQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxDQUFDO1NBQ3BELE1BQU0sRUFBRSxDQUFDO0lBRWQsSUFBSSxNQUFNLElBQUksU0FBUyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ3ZELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsZ0NBQWdDLEVBQUMsQ0FBQyxDQUFDO0tBQzlGO0lBRUQsSUFBSSxDQUFDLE1BQU0seUJBQVcsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxNQUFNLENBQUMsRUFBRSxFQUFFO1FBQ3RELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsb0RBQW9ELEVBQUMsQ0FBQyxDQUFDO0tBQ2xIO0lBRUQsZUFBZTtJQUNmLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUUxQixRQUFRO0lBQ1IsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0MsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBRXRCLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUM7QUFFaEQsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQU8sR0FBb0IsRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUVyRCxJQUFJLEdBQUcsQ0FBQyxlQUFlLEVBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUc3QyxJQUFJLGFBQWEsR0FBRyxNQUFNLHlCQUFXLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFdEQsSUFBSSxhQUFhLElBQUksU0FBUyxFQUFFO1lBQzVCLGFBQWEsQ0FBQyxPQUFPLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQztZQUMzQyxNQUFNLDRCQUFlLEVBQUUsQ0FBQyxhQUFhLENBQUMseUJBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUMxRTtRQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7S0FHN0I7U0FDSTtRQUNELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEIsR0FBRyxDQUFDLElBQUksQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0tBQ3REO0FBR0wsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdHJlYW1RdWV1ZSwgdXBkYXRlU3RyZWFtUXVldWV9IGZyb20gXCIuLi9kYXRhYmFzZS9lbnRpdHkvU3RyZWFtUXVldWVcIjtcbmltcG9ydCB7UmVwb3NpdG9yeX0gZnJvbSBcInR5cGVvcm1cIjtcbmltcG9ydCB7Z2V0REJDb25uZWN0aW9ufSBmcm9tIFwiLi4vZGF0YWJhc2UvY29ubmVjdGlvblwiO1xuaW1wb3J0IHtVc2VyfSBmcm9tIFwiLi4vZGF0YWJhc2UvZW50aXR5L1VzZXJcIjtcbmltcG9ydCB7dGhyb3R0bGV9IGZyb20gJ3Rocm90dGxlLWRlYm91bmNlJztcbmltcG9ydCB7aXNOdWxsT3JVbmRlZmluZWR9IGZyb20gXCJ1dGlsXCI7XG5cbmNvbnN0IG1vbWVudCA9IHJlcXVpcmUoXCJtb21lbnRcIik7XG5cbnZhciBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xudmFyIHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG5cbnJvdXRlci5wb3N0KCcvdXBkYXRlJywgYXN5bmMgKHJlcTogRXhwcmVzcy5SZXF1ZXN0LCByZXMpID0+IHtcblxuICAgIGNvbnN0IHVwZGF0ZSA9IHRocm90dGxlKDEwMDAsICgpID0+IHtcbiAgICAgICAgc2V0SW1tZWRpYXRlKHVwZGF0ZVN0cmVhbVF1ZXVlKTtcbiAgICB9KTtcblxuICAgIHVwZGF0ZSgpO1xuXG4gICAgYXN5bmMgZnVuY3Rpb24gc2VuZERhdGEoKSB7XG4gICAgICAgIHJlcy5zZW5kKHtcbiAgICAgICAgICAgIGF1dGg6IHRydWUsXG4gICAgICAgICAgICBwb2ludHM6IHJlcS51c2VyLnBvaW50cyxcbiAgICAgICAgICAgIHF1ZXVlOiAoYXdhaXQgU3RyZWFtUXVldWUuY3VycmVudEFuZE5leHRTdHJlYW1zKCkpLFxuICAgICAgICAgICAgdmlld2VyczogKGF3YWl0IFVzZXIudmlld2VycygpKSxcbiAgICAgICAgICAgIG1vc3RQb2ludHM6IChhd2FpdCBVc2VyLm1vc3RQb2ludHMoKSksXG4gICAgICAgICAgICBtb3N0UGxhY2U6IChhd2FpdCBVc2VyLm1vc3RQbGFjZSgpKSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlcS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuXG4gICAgICAgIC8vY2hlY2sgaWYgc3RyZWFtIGlzIG9ubGluZVxuICAgICAgICBsZXQgY3VycmVudCA9IGF3YWl0IFN0cmVhbVF1ZXVlLmN1cnJlbnRTdHJlYW0oKTtcblxuICAgICAgICAvL0NoZWNrIGlmIHN0cmVhbSBhbmQgaXMgbm90IHNlbGYgc3RyZWFtXG4gICAgICAgIGlmIChjdXJyZW50ID09IHVuZGVmaW5lZCB8fCBjdXJyZW50LnVzZXIuaWQgPT09IHJlcS51c2VyLmlkKSB7XG4gICAgICAgICAgICBhd2FpdCBzZW5kRGF0YSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGlzT25saW5lID0gYXdhaXQgU3RyZWFtUXVldWUuaXNDdXJyZW50T25saW5lKGN1cnJlbnQudXNlci51c2VybmFtZSk7XG5cbiAgICAgICAgLy9DaGVjayBpZiBzdHJlYW0gaXMgb25saW5lXG4gICAgICAgIGlmICghaXNPbmxpbmUpIHtcbiAgICAgICAgICAgIGF3YWl0IHNlbmREYXRhKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbmV3RGF0ZSA9IG1vbWVudCgpO1xuXG4gICAgICAgIGxldCBsYXN0VXBkYXRlOiBEYXRlID0gcmVxLnVzZXIubGFzdFVwZGF0ZVRpbWUoKTtcblxuICAgICAgICAvL0lmIGxhc3RVcGRhdGUgd2FzIG9uZSBtaW51dGVzIG9yIGxlc3MgYWdvXG4gICAgICAgIGlmIChtb21lbnQobGFzdFVwZGF0ZSkuYWRkKDEsIFwibWludXRlc1wiKSA+PSBuZXdEYXRlKSB7XG4gICAgICAgICAgICBhd2FpdCByZXEudXNlci5jaGFuZ2VQb2ludHMoKG5ld0RhdGUudG9EYXRlKCkuZ2V0VGltZSgpIC0gbGFzdFVwZGF0ZS5nZXRUaW1lKCkpIC8gMTAwMCk7XG4gICAgICAgICAgICByZXEudXNlci5sYXN0VXBkYXRlID0gbmV3RGF0ZS50b0RhdGUoKTtcbiAgICAgICAgICAgIGF3YWl0IHJlcS51c2VyLnNhdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcS51c2VyLmxhc3RVcGRhdGUgPSBuZXdEYXRlLnRvRGF0ZSgpO1xuICAgICAgICAgICAgYXdhaXQgcmVxLnVzZXIuc2F2ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgc2VuZERhdGEoKTtcbiAgICAgICAgcmV0dXJuO1xuXG5cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vTm90IGF1dGhcbiAgICAgICAgcmV0dXJuIHJlcy5zZW5kKHthdXRoOiBmYWxzZX0pO1xuICAgIH1cblxufSk7XG5cbnJvdXRlci5wb3N0KCcvYWRkJywgYXN5bmMgKHJlcTogRXhwcmVzcy5SZXF1ZXN0LCByZXMpID0+IHtcblxuICAgIGlmIChyZXEuaXNBdXRoZW50aWNhdGVkKCkpIHtcblxuICAgICAgICAvL0NoZWNrIGlmIHF1ZXVlIGlzIGVtcHR5XG4gICAgICAgIGxldCBjb3N0ID0gKGF3YWl0IFN0cmVhbVF1ZXVlLmlzRW1wdHkoKSkgPyAwIDogMTAwMDtcblxuICAgICAgICAvL0NoZWNrIGlmIGVub3VnaCBwb2ludHNGdW5jXG4gICAgICAgIGxldCBwb2ludHMgPSAoYXdhaXQgcmVxLnVzZXIucG9pbnRzKTtcbiAgICAgICAgaWYgKHBvaW50cyA8IGNvc3QpIHtcbiAgICAgICAgICAgIC8vTm8gZW5vdWdoIHBvaW50XG4gICAgICAgICAgICByZXMuc2VuZCh7YXV0aDogdHJ1ZSwgZW5vdWdoOiBmYWxzZSwgcG9pbnRzLCBjb3N0fSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvL0Vub3VnaCBwb2ludFxuICAgICAgICAgICAgbGV0IHN0cmVhbSA9IG5ldyBTdHJlYW1RdWV1ZSgpO1xuICAgICAgICAgICAgc3RyZWFtLmFtb3VudCA9IGNvc3Q7XG4gICAgICAgICAgICBzdHJlYW0udGltZSA9IDYwICogMTA7XG5cbiAgICAgICAgICAgIHN0cmVhbS51c2VyID0gcmVxLnVzZXI7XG5cbiAgICAgICAgICAgIGxldCByZXBvc2l0b3J5OiBSZXBvc2l0b3J5PFN0cmVhbVF1ZXVlPiA9IGdldERCQ29ubmVjdGlvbigpLmdldFJlcG9zaXRvcnkoU3RyZWFtUXVldWUpO1xuICAgICAgICAgICAgYXdhaXQgcmVwb3NpdG9yeS5zYXZlKHN0cmVhbSk7XG5cbiAgICAgICAgICAgIHJlcS51c2VyLnN0cmVhbVF1ZXVlLnB1c2goc3RyZWFtKTtcblxuICAgICAgICAgICAgLy9DaGFuZ2UgcG9pbnRzXG4gICAgICAgICAgICBhd2FpdCByZXEudXNlci5jaGFuZ2VQb2ludHMoLWNvc3QpO1xuXG4gICAgICAgICAgICByZXMuc2VuZCh7YXV0aDogdHJ1ZSwgZW5vdWdoOiB0cnVlfSk7XG4gICAgICAgIH1cblxuXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvL05vdCBhdXRoXG4gICAgICAgIHJlcy5zZW5kKHthdXRoOiBmYWxzZX0pO1xuXG4gICAgfVxuXG59KTtcblxucm91dGVyLnBvc3QoJy9kZWxldGUnLCBhc3luYyAocmVxOiBFeHByZXNzLlJlcXVlc3QsIHJlcykgPT4ge1xuXG4gICAgaWYgKHJlcS5pc1VuYXV0aGVudGljYXRlZCgpKSB7XG4gICAgICAgIHJldHVybiByZXMuc2VuZCh7YXV0aDogZmFsc2V9KTtcbiAgICB9XG5cbiAgICAvL0dldCBpZFxuICAgIGNvbnN0IGlkID0gcmVxWydib2R5J10uaWQ7XG5cbiAgICBpZiAoaWQgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXMuc2VuZCh7YXV0aDogdHJ1ZSwgZXJyb3I6IHRydWUsIGVycm9yTWVzc2FnZTogXCJJbXBvc3NpYmxlIGRlIHRyb3V2ZXIgbGEgcGxhY2VcIn0pO1xuICAgIH1cblxuICAgIC8vR2V0IHN0cmVhbVxuICAgIGNvbnN0IHJlcG8gPSBnZXREQkNvbm5lY3Rpb24oKS5nZXRSZXBvc2l0b3J5KFN0cmVhbVF1ZXVlKTtcbiAgICBjb25zdCBzdHJlYW0gPSBhd2FpdCByZXBvLmNyZWF0ZVF1ZXJ5QnVpbGRlcihcInF1ZXVlXCIpXG4gICAgICAgIC5sZWZ0Sm9pbkFuZFNlbGVjdChcInF1ZXVlLnVzZXJcIiwgXCJ1c2VyXCIpXG4gICAgICAgIC53aGVyZShcInF1ZXVlLmlkID0gOmlkXCIsIHtpZH0pXG4gICAgICAgIC5hbmRXaGVyZShcInVzZXIuaWQgPSA6dXNlcmlkXCIsIHt1c2VyaWQ6IHJlcS51c2VyLmlkfSlcbiAgICAgICAgLmdldE9uZSgpO1xuXG4gICAgaWYgKHN0cmVhbSA9PSB1bmRlZmluZWQgfHwgc3RyZWFtLnVzZXIuaWQgIT09IHJlcS51c2VyLmlkKSB7XG4gICAgICAgIHJldHVybiByZXMuc2VuZCh7YXV0aDogdHJ1ZSwgZXJyb3I6IHRydWUsIGVycm9yTWVzc2FnZTogXCJJbXBvc3NpYmxlIGRlIHRyb3V2ZXIgbGEgcGxhY2VcIn0pO1xuICAgIH1cblxuICAgIGlmICgoYXdhaXQgU3RyZWFtUXVldWUuY3VycmVudFN0cmVhbSgpKS5pZCA9PT0gc3RyZWFtLmlkKSB7XG4gICAgICAgIHJldHVybiByZXMuc2VuZCh7YXV0aDogdHJ1ZSwgZXJyb3I6IHRydWUsIGVycm9yTWVzc2FnZTogXCJPbiBuZSBwZXV0IHBhcyBzdXBwcmltZXIgc2kgb24gw6AgbGEgcHJlbWnDqHJlIHBsYWNlXCJ9KTtcbiAgICB9XG5cbiAgICAvL0RlbGV0ZSBzdHJlYW1cbiAgICBhd2FpdCByZXBvLnJlbW92ZShzdHJlYW0pO1xuXG4gICAgLy9SZWZ1bmRcbiAgICBhd2FpdCByZXEudXNlci5jaGFuZ2VQb2ludHMoc3RyZWFtLmFtb3VudCk7XG4gICAgYXdhaXQgcmVxLnVzZXIuc2F2ZSgpO1xuXG4gICAgcmV0dXJuIHJlcy5zZW5kKHthdXRoOiB0cnVlLCBlcnJvcjogZmFsc2V9KTtcblxufSk7XG5cbnJvdXRlci5wb3N0KCcvc2tpcCcsIGFzeW5jIChyZXE6IEV4cHJlc3MuUmVxdWVzdCwgcmVzKSA9PiB7XG5cbiAgICBpZiAocmVxLmlzQXV0aGVudGljYXRlZCgpICYmIHJlcS51c2VyLm1vZGVyYXRvcikge1xuXG5cbiAgICAgICAgbGV0IGN1cnJlbnRTdHJlYW0gPSBhd2FpdCBTdHJlYW1RdWV1ZS5jdXJyZW50U3RyZWFtKCk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRTdHJlYW0gIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjdXJyZW50U3RyZWFtLmN1cnJlbnQgPSBjdXJyZW50U3RyZWFtLnRpbWU7XG4gICAgICAgICAgICBhd2FpdCBnZXREQkNvbm5lY3Rpb24oKS5nZXRSZXBvc2l0b3J5KFN0cmVhbVF1ZXVlKS5zYXZlKGN1cnJlbnRTdHJlYW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzLnNlbmQoXCJTdHJlYW0gc2tpcHDDqVwiKTtcblxuXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXMuc3RhdHVzKDQwMyk7XG4gICAgICAgIHJlcy5zZW5kKFwiVm91cyBuJ2F2ZXogcGFzIGxlIGRyb2l0IGRlIGZhaXJlIMOnYSAhXCIpO1xuICAgIH1cblxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSByb3V0ZXI7Il19